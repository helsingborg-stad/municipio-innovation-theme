!function(e){var t={};function o(l){if(t[l])return t[l].exports;var r=t[l]={i:l,l:!1,exports:{}};return e[l].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,l){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:l})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(o.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(l,r,function(t){return e[t]}.bind(null,r));return l},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}([function(e,t,o){!function(){"use strict";e.exports={polyfill:function(){var e=window,t=document;if(!("scrollBehavior"in t.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var o,l=e.HTMLElement||e.Element,r={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:l.prototype.scroll||s,scrollIntoView:l.prototype.scrollIntoView},i=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,n=(o=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(o)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?v.call(e,t.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):r.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?r.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):v.call(e,t.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},l.prototype.scroll=l.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var e=arguments[0].left,t=arguments[0].top;v.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===t?this.scrollTop:~~t)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},l.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},l.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var o=d(this),l=o.getBoundingClientRect(),i=this.getBoundingClientRect();o!==t.body?(v.call(this,o,o.scrollLeft+i.left-l.left,o.scrollTop+i.top-l.top),"fixed"!==e.getComputedStyle(o).position&&e.scrollBy({left:l.left,top:l.top,behavior:"smooth"})):e.scrollBy({left:i.left,top:i.top,behavior:"smooth"})}else r.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function s(e,t){this.scrollLeft=e,this.scrollTop=t}function c(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function f(e,t){return"Y"===t?e.clientHeight+n<e.scrollHeight:"X"===t?e.clientWidth+n<e.scrollWidth:void 0}function a(t,o){var l=e.getComputedStyle(t,null)["overflow"+o];return"auto"===l||"scroll"===l}function u(e){var t=f(e,"Y")&&a(e,"Y"),o=f(e,"X")&&a(e,"X");return t||o}function d(e){for(;e!==t.body&&!1===u(e);)e=e.parentNode||e.host;return e}function p(t){var o,l,r,n,s=(i()-t.startTime)/468;n=s=s>1?1:s,o=.5*(1-Math.cos(Math.PI*n)),l=t.startX+(t.x-t.startX)*o,r=t.startY+(t.y-t.startY)*o,t.method.call(t.scrollable,l,r),l===t.x&&r===t.y||e.requestAnimationFrame(p.bind(e,t))}function v(o,l,n){var c,f,a,u,d=i();o===t.body?(c=e,f=e.scrollX||e.pageXOffset,a=e.scrollY||e.pageYOffset,u=r.scroll):(c=o,f=o.scrollLeft,a=o.scrollTop,u=s),p({scrollable:c,method:u,startTime:d,startX:f,startY:a,x:l,y:n})}}}}()},,function(e,t,o){"use strict";o.r(t);var l=o(0),r=o.n(l),i=(window.addEventListener("DOMContentLoaded",(function(e){var t=document.querySelectorAll(".js-trigger-mobile-menu"),o=document.querySelectorAll(".js-close-mobile-menu"),l=document.querySelector(".js-mobile-menu");l&&(t&&t.length>0&&t.forEach((function(e){e.addEventListener("click",(function(t){if(!l.classList.contains("is-open"))return l.classList.toggle("is-open"),document.body.classList.toggle("has-open-mobile-menu"),void e.classList.toggle("is-active");l.classList.remove("is-open"),document.body.classList.toggle("has-open-mobile-menu"),e.classList.toggle("is-active")}))})),o&&o.length>0&&o.forEach((function(e){e.addEventListener("click",(function(e){l.classList.remove("is-open"),enableBodyScroll(l)}))})))})),function(e){var t=e.querySelector(".js-post-slider__flickity"),o=null==t?void 0:t.getAttribute("data-flickity-options"),l=!!o&&JSON.parse(o),r=!(!t||!l)&&new Flickity(t,l),i=e.querySelector(".js-post-slider__prev"),n=e.querySelector(".js-post-slider__next");(null==r?void 0:r.previous)&&i&&i.addEventListener("click",(function(e){e.preventDefault(),r.previous()})),(null==r?void 0:r.next)&&n&&n.addEventListener("click",(function(e){e.preventDefault(),r.next()}))});document.addEventListener("DOMContentLoaded",(function(e){var t;r.a.polyfill(),Object.values(document.querySelectorAll('a[href^="#"]')).forEach((function(e){e.addEventListener("click",(function(e){if(e.preventDefault(),"#"!==this.getAttribute("href")){var t=document.querySelector("html").getAttribute("data-header-offset"),o=null!=t?t:0,l=document.querySelector(this.getAttribute("href")).getBoundingClientRect().top+window.pageYOffset-o;window.scrollTo({top:l,behavior:"smooth"})}}))})),function(){Flickity.prototype._createResizeClass=function(){this.element.classList.add("flickity-resize")},Flickity.createMethods.push("_createResizeClass");var e=Flickity.prototype.resize;Flickity.prototype.resize=function(){this.element.classList.remove("flickity-resize"),e.call(this),this.element.classList.add("flickity-resize")}}(),(t=document.querySelectorAll(".js-post-slider")).length>0&&"undefined"!=typeof Flickity&&t.forEach(i)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,